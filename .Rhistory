?cbind
f<-matrix()
cbind(c(1,2),c(3,4))
f<-cbind(c(1,2),c(3,4))
f
# Put comments here that give an overall description of what your
## functions do
## cache the inverse of a matrix in the environment using the <<- operator
makeCacheMatrix <- function(x = matrix()) {
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setsetinverse,
getinverse = getinverse)
}
## If the inverse is cached retrieve it, if not generate it
cacheSolve <- function(x=matrix(), ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix(f)
## Put comments here that give an overall description of what your
## functions do
## cache the inverse of a matrix in the environment using the <<- operator
makeCacheMatrix <- function(x = matrix()) {
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## If the inverse is cached retrieve it, if not generate it
cacheSolve <- function(x=matrix(), ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix(f)
makeCacheMatrix(f)
debug(makeCacheMatrix)
makeCacheMatrix(f)
cacheSolve(f)
# Put comments here that give an overall description of what your
## functions do
## cache the inverse of a matrix in the environment using the <<- operator
makeCacheMatrix <- function(x = matrix()) {
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## If the inverse is cached retrieve it, if not generate it
cacheSolve <- function(x=matrix(), ...) {
## Return a matrix that is the inverse of 'x'
m <- x["getinverse"]
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x["get"]
m <- solve(data, ...)
x["setinverse(m)"]
m
}
cacheSolve(f)
cacheSolve(f)
makeCacheMatrix(f)
cacheSolve(f)
cacheSolve(f)
cacheSolve(f)
debug(makeCacheMatrix)
makeCacheMatrix(f)
debug(cacheSolve)
cacheSolve(f)
## Put comments here that give an overall description of what your
## functions do
## cache the inverse of a matrix in the environment using the <<- operator
makeCacheMatrix <- function(x = matrix()) {
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## If the inverse is cached retrieve it, if not generate it
cacheSolve <- function(x=matrix(), ...) {
## Return a matrix that is the inverse of 'x'
m <- x["getinverse"]
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x["get"]
m <- solve(data, ...)
x["setinverse"]<--m
m
}
makeCacheMatrix(f)
cacheSolve(f)
debug(cacheSolve)
cacheSolve(f)
debug(makeCacheMatrix)
makeCacheMatrix(f)
data(mtcars)
data
library(MASS)
data()
data<-data.frame()
data<-data(mtcars)
data
test<-data.frame()
data(mtcars)
mtcars
aggregate(mpg~cyl, data=x, FUN=function(x) c(mean=mean(x), count=length(x)))
aggregate(mpg~cyl, data=mtcars, FUN=function(x) c(mean=mean(x), count=length(x)))
x<-mtcars(mtcars$mpg)
x<-mtcars[mtcars$mpg]
x<-mtcars[$mpg]
x<-mtcars[mpg]
mtcars
x<-mtcars[mpg]
mtcars
x<-mtcars[cyl]
x <- sample(10:20, 44, TRUE)
#Your code
factorx <- factor(cut(x, breaks=nclass.Sturges(x)))
#Tabulate and turn into data.frame
xout <- as.data.frame(table(factorx))
#Add cumFreq and proportions
xout <- transform(xout, cumFreq = cumsum(Freq), relative = prop.table(Freq))
x <- sample(10:20, 44, TRUE)
factorx <- factor(cut(x, breaks=nclass.Sturges(x)))
#Tabulate and turn into data.frame
xout <- as.data.frame(table(factorx))
#Add cumFreq and proportions
xout <- transform(xout, cumFreq = cumsum(Freq), relative = prop.table(Freq))
x<-mtcars[cyl]
x
factorx
xout
x <- sample(10:20, 44, TRUE)
factorx <- factor(cut(x, breaks=nclass.Sturges(x)))
#Tabulate and turn into data.frame
xout <- as.data.frame(table(factorx))
#Add cumFreq and proportions
xout <- transform(xout, cumFreq = cumsum(Freq), relative = prop.table(Freq))
x
xout
x<-mtcars[mpg]
x<-mtcars["mpg"]
x
xout
xout
factorx
xout
library(MASS)
data(mtcars)
x <- mtcars("mpg")
factorx <- factor(cut(x, breaks=nclass.Sturges(x)))
#Tabulate and turn into data.frame
xout <- as.data.frame(table(factorx))
#Add cumFreq and proportions
xout <- transform(xout, cumFreq = cumsum(Freq), relative = prop.table(Freq))
mtcars
factorx
xout
length(x)
dims(x)
library(MASS)
data(mtcars)
mtcars
x<-mtcars[hp]
x<-mtcars["hp"]
x
y<-mean(x)
x<-c(mtcars["hp"])
x
mean(x)
x<-as.vector(x, mode="numeric")
mean(x)
unlist(x)
mean(x)
x<-mtcars("hp")
mtcars
x<-mtcars("hp")
x<-mtcars["hp"]
x
unlist(x,us.names=FALSE)
unlist(x,usE.names=FALSE)
unlist(x,use.names=FALSE)
mean(x)
class(x)
x<-mtcars[["hp"]]
x
mean(x)
summary(x)
x<-mtcars["mpg"]
factorx <- factor(cut(x, breaks=nclass.Sturges(x)))
x<-mtcars[["mpg"]]
factorx <- factor(cut(x, breaks=nclass.Sturges(x)))
factorx
xout <- as.data.frame(table(factorx))
xout <- transform(xout, cumFreq = cumsum(Freq), relative = prop.table(Freq))
xout
library(MASS)
data(mtcars)
mtcars
x<-mtcars["hp"]
x
x<-mtcars[["hp"]]
x
mean(x)
summary(x)
factorx <- factor(cut(x, breaks=nclass.Sturges(x)))
factorx
xout <- as.data.frame(table(factorx))
xout <- transform(xout, cumFreq = cumsum(Freq), relative = prop.table(Freq))
xout
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day<-today()
this_day
month()
year()
bye()
library(swirl)
swirl()
month()
bye()
packageVersion(lubridate)
packageVersion("lubridate")
month(this_day)
swirl()
month(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
ymd(25081985)
dmy(25081985)
ymd("1920212")
ymd("192012")
ymd("1920-1-2")
dtl
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment<-update(this_moment, hours=10, minutes=21)
this_moment
nyc<-now("America/New_York")
nyc
depart<-nyc + days(2)
depart
depart<-update(depart, hours=17, minutes=34)
depart
arrive<-depart+hours(15)+minuttes(50)
arrive<-depart+hours(15)+minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
with_tz(arrive, tzone="Asia/Hong_Kong")
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd('c://users/dale/my documents/github/exdata_plotting1')
electric1<-read.csv("household_power_consumption.txt",na.strings="?",sep=";",as.is=TRUE)
electric1[,1]<-as.Date(electric1[,1],format="%d/%m/%Y")
electric2<-subset(electric1,electric1$Date==c("2007-02-01","2007-02-02"))
rm(electric1)
electric2[,10]<-paste(as.character(electric2[,1]),electric2[,2])
electric2[,10]<- as.POSIXct(electric2[,10])
colnames(electric2)[10]<-"DateTime"
plot(electric2$DateTime,electric2$sum_metering_1,type='l', ylab="Energy sub metering",xlab="", sub="")
plot(electric2$sub_metering_1,electric2$DateTime,type='l', ylab="Energy sub metering",xlab="", sub="")
plot(electric2$DateTime,electric2$sub_metering_1,type='l', ylab="Energy sub metering", sub="")
plot(electric2$DateTime,electric2$sub_metering_1,type='l', ylab="Energy sub metering")
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering")
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",sub="")
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",xlab="",sub="")
lines(electric2$DateTime,electric2$Sub_metering_2)
lines(electric2$DateTime,electric2$Sub_metering_3)
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",xlab="",sub="")
lines(electric2$DateTime,electric2$Sub_metering_2,col="red")
lines(electric2$DateTime,electric2$Sub_metering_3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
png("plot2.png", height=480, width=480)
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",xlab="",sub="")
lines(electric2$DateTime,electric2$Sub_metering_2,col="red")
lines(electric2$DateTime,electric2$Sub_metering_3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
dev.off()
png("plot3.png", height=480, width=480)
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",xlab="",sub="")
lines(electric2$DateTime,electric2$Sub_metering_2,col="red")
lines(electric2$DateTime,electric2$Sub_metering_3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
dev.off()
png("plot2.png", height=480, width=480)
plot(electric2$DateTime,electric2$Global_active_power,type='l', ylab="Global Active Power (kilowatts)",xlab="", sub="")
lines(electric2$DateTime,electric2$Global_active_power)
dev.off()
par(mfcol(2,2))
plot(electric2$DateTime,electric2$Global_active_power,type='l', ylab="Global Active Power (kilowatts)",xlab="", sub="")
lines(electric2$DateTime,electric2$Global_active_power)
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",xlab="",sub="")
lines(electric2$DateTime,electric2$Sub_metering_2,col="red")
lines(electric2$DateTime,electric2$Sub_metering_3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
par(mfcol=c(2,2))
plot(electric2$DateTime,electric2$Global_active_power,type='l', ylab="Global Active Power (kilowatts)",xlab="", sub="")
lines(electric2$DateTime,electric2$Global_active_power)
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",xlab="",sub="")
lines(electric2$DateTime,electric2$Sub_metering_2,col="red")
lines(electric2$DateTime,electric2$Sub_metering_3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
par(mfcol=c(2,2))
plot(electric2$DateTime,electric2$Global_active_power,type='l', ylab="Global Active Power (kilowatts)",xlab="", sub="")
lines(electric2$DateTime,electric2$Global_active_power)
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",xlab="",sub="")
lines(electric2$DateTime,electric2$Sub_metering_2,col="red")
lines(electric2$DateTime,electric2$Sub_metering_3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(electric2$Voltage,electric2$DateTime,type="l",ylab="Voltage",xlab="datetime")
par(mfcol=c(2,2))
plot(electric2$DateTime,electric2$Global_active_power,type='l', ylab="Global Active Power (kilowatts)",xlab="", sub="")
lines(electric2$DateTime,electric2$Global_active_power)
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",xlab="",sub="")
lines(electric2$DateTime,electric2$Sub_metering_2,col="red")
lines(electric2$DateTime,electric2$Sub_metering_3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(electric2$DateTime,electric2$Voltage,type="l",ylab="Voltage",xlab="datetime")
par(mfcol=c(2,2))
plot(electric2$DateTime,electric2$Global_active_power,type='l', ylab="Global Active Power (kilowatts)",xlab="", sub="")
lines(electric2$DateTime,electric2$Global_active_power)
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",xlab="",sub="")
lines(electric2$DateTime,electric2$Sub_metering_2,col="red")
lines(electric2$DateTime,electric2$Sub_metering_3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(electric2$DateTime,electric2$Voltage,type="l",ylab="Voltage",xlab="datetime")
plot(electri2$DateTime,electric2$Global_reactive_power,type="o",xlab="datetime",ylab="Global_reative_power")
plot(electri2$DateTime,electric2$Global_reactive_power,type="o",xlab="datetime",ylab="Global_reative_power")
par(mfcol=c(2,2))
plot(electric2$DateTime,electric2$Global_active_power,type='l', ylab="Global Active Power (kilowatts)",xlab="", sub="")
lines(electric2$DateTime,electric2$Global_active_power)
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",xlab="",sub="")
lines(electric2$DateTime,electric2$Sub_metering_2,col="red")
lines(electric2$DateTime,electric2$Sub_metering_3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(electric2$DateTime,electric2$Voltage,type="l",ylab="Voltage",xlab="datetime")
plot(electri2$DateTime,electric2$Global_reactive_power,type="b",xlab="datetime",ylab="Global_reative_power")
plot(electri2$DateTime,electric2$Global_reactive_power,type="b",xlab="datetime",ylab="Global_reative_power")
plot(electric2$DateTime,electric2$Global_reactive_power,type="o",xlab="datetime",ylab="Global_reative_power")
par(mfcol=c(2,2))
plot(electric2$DateTime,electric2$Global_active_power,type='l', ylab="Global Active Power (kilowatts)",xlab="", sub="")
lines(electric2$DateTime,electric2$Global_active_power)
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",xlab="",sub="")
lines(electric2$DateTime,electric2$Sub_metering_2,col="red")
lines(electric2$DateTime,electric2$Sub_metering_3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(electric2$DateTime,electric2$Voltage,type="l",ylab="Voltage",xlab="datetime")
plot(electric2$DateTime,electric2$Global_reactive_power,type="l",xlab="datetime",ylab="Global_reative_power")
png("plot4.png", height=480, width=480)
par(mfcol=c(2,2))
plot(electric2$DateTime,electric2$Global_active_power,type='l', ylab="Global Active Power (kilowatts)",xlab="", sub="")
lines(electric2$DateTime,electric2$Global_active_power)
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",xlab="",sub="")
lines(electric2$DateTime,electric2$Sub_metering_2,col="red")
lines(electric2$DateTime,electric2$Sub_metering_3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(electric2$DateTime,electric2$Voltage,type="l",ylab="Voltage",xlab="datetime")
plot(electric2$DateTime,electric2$Global_reactive_power,type="l",xlab="datetime",ylab="Global_reative_power")
dev.off()
png("plot4.png", height=480, width=480)
par(mfcol=c(2,2))
plot(electric2$DateTime,electric2$Global_active_power,type='l', ylab="Global Active Power",xlab="", sub="")
lines(electric2$DateTime,electric2$Global_active_power)
plot(electric2$DateTime,electric2$Sub_metering_1,type='l', ylab="Energy sub metering",xlab="",sub="")
lines(electric2$DateTime,electric2$Sub_metering_2,col="red")
lines(electric2$DateTime,electric2$Sub_metering_3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(electric2$DateTime,electric2$Voltage,type="l",ylab="Voltage",xlab="datetime")
plot(electric2$DateTime,electric2$Global_reactive_power,type="l",xlab="datetime",ylab="Global_reative_power")
dev.off()
